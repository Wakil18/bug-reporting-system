<?php

namespace Tests\Units;

use App\Contracts\LoggerInterface;
use App\Exception\InvalidLogLevelArgument;
use App\Helpers\App;
use App\Logger\Logger;
use App\Logger\LogLevel;
use PHPUnit\Framework\TestCase;

class LoggesTest extends TestCase
{
    private  $logger;

    public function setUp(): void
    {
        $this->logger = new Logger;
        parent::setUp(); // TODO: Change the autogenerated stub
    }

    public function testItImplementsTheLoggerInterface()
    {
        self::assertInstanceOf(LoggerInterface::class, $this->logger);
    }

        public function testItCanCreateDifferentTypeOfLogLevels()
        {
            $this->logger->info('Testing info logs');
            $this->logger->error('Testing Error logs');
            $this->logger->log(LogLevel::ALERT, 'Testing Alert logs');
            $app = new App();

            $fileName = sprintf("%s/%s-%s.log", $app->getLogPath(), 'test', date('j,n,Y'));
            self::assertFileExists($fileName);

            $contentOfLogFile = file_get_contents($fileName);
            self::assertStringContainsString('Testing info logs', $contentOfLogFile);
            self::assertStringContainsString('Testing Error logs', $contentOfLogFile);
            self::assertStringContainsString(LogLevel::ALERT, $contentOfLogFile);

            unlink($fileName);

            self::assertFileNotExists($fileName);
        }

    /**
     * @throws \App\Exception\InvalidLogLevelArgument
     */
    public function testItThrowsInvalidLogLevelArgumentExceptionWhenGivingAWrongLogLevel()
        {
            $this->expectException(InvalidLogLevelArgument::class);
            $this->logger->log('invalid', 'Testing invalid log level');
        }

}